#summary How to compile MicroLua.

<wiki:toc />

= How To Compile MicroLua v3.0. =

== Introduction ==

This page will guide you on how to setup the development environment
for building the source of MicroLua. There are several steps and several
packages to install, but should be relatively straightforward.

== Windows XP ==

First download everything here and then follow the instructions below.

 * Several archives are in the 7z format, so you will need [http://www.7-zip.org/ 7-zip] or [http://portableapps.com/apps/utilities/peazip_portable PeaZip Portable].
 * [http://sourceforge.net/projects/devkitpro/files/Automated%20Installer/devkitProUpdater-1.5.0.exe/download devkitPro]
 * [http://sourceforge.net/projects/devkitpro/files/devkitARM/previous/devkitARM%20release%2024/devkitARM_r24-win32.exe/download devkitARM-r24]
 * PAlib (the version needed is PAlib090801.7z, you can download it in a [http://forum.palib.info/index.php?topic=7048.0 forum thread] with links to many mirrors).
 * [http://brunni.palib.info/new/dl/nds/uLibrary.7z uLibrary]
 * fatlib (The [http://nanolua.fr.nf/nanolua/files/libfat20080530.zip 20080530 version] should have better results, you'll only find it here)
 * The source code ([http://code.google.com/p/microlua/source/checkout Subversion repository] or [http://code.google.com/p/microlua/downloads/list zip])


=== Details ===

==== DevKitPro ====

Start with DevKitPro.  You may use the web installer from the website, or our copy here.
This package is the compiler and binary tools for compiling ARM source code.
Recommend to install to 'c:\devkitpro'. Just don't use spaces in any folder names.
Hereafter we refer to your devkitpro install folder as simply '\devkitpro'.


==== DevARM-`r24` ====

Initially MicroLua v3.0 requires to backdate the DevARM library.
This is the ARM 7/9 hardware library.  Rename or delete the DevKitPro `DevArm` folder, then unpack this package into '\devkitpro'.

==== PAlib ====

PAlib is a Nintendo DS hardware library.  This library provides access most of the features of the DS. 

 * Install PAlib into '\devkitpro'
 * cd to '\devkitpro\PAlib\lib'
 * Run 'build.bat'

==== uLibrary ====

uLibrary is a lib for low level 'OS' like stuff for ARM processors.
This is built next.
  
 * Unpack to '\devkitpro\'
 * cd to '\devkitpro\uLibrary-1.12\Source\'
 * Run 'build.bat'
 * Run 'Install.bat'
 * cd .. to '\devkitpro\uLibrary-1.12\'
 * Run 'Install.bat' here also (yes they do 2 different tasks)!

==== fatlib ====

This has to be backdated.  Use the version listed above, 20080530.
Extract the zip to a location.  

 * Copy the file '\libfat20080530\nds\lib\libfat.a' to '\devkitpro\libnds\lib'
 * Copy the file '\libfat20080530\nds\include\fat.h' to '\devkitpro\libnds\include'

==== MicroLua Source ====

 * Extract the microLua source to folder '\devkitpro\'
 * Rename the resulting source folder 'Micro Lua DS v3.0\'(the one containing `Examples`, `Fat`...) to 'luads'
 * Copy '\devkitpro\luads\img\fcsr.dldi' file to '\devkitpro\devkitarm\bin\dldi\' (make the dldi folder)

==== Launch the compilation ====

Now use `\devkitpro\luads\Compile All.bat` file to build. Either double click it of launch it from the command line.

=== Folders ===

{{{
\devkitPro
	\devkitARM
	\examples
	\insight
	\libfat20080530
	\libgba
	\libmirko
	\libnds
	\luads
		\Examples
		\Fat
		\img
		\lua-5.1.3
		\source
		\Utilities
	\msys
	\Other Libs
	\PAlib
	\Programmers Notepad
	\uLibrary-1.12
}}}

=== Notes ===

==== Libs ====
Once the DevKitPro, DevARM-`r24`, PAlib, uLibrary and fatlib are setup you don't have to recompile those unless one of these components is updated.  The setup is complete.

==== Environment variables ====
DevKitPro uses 2 environment variables.
They are: 
{{{
 DEVKITPRO=c:\devkitpro
 DEVKITARM=c:\devkitpro\devkitarm
}}}

To do it manually: 
 Start->Control Panel->System<br>
 Then click on 'Advanced' tab<br> 
 Then click the button at the bottom 'Environment Variables'<br> 
 They should be in the bottom list, System Variables<br>


==== Reference Package ====
We should probably make a big package for win32 that contains all this stuff already done. This way newbies can get just one package to unzip and go. Such a package would be about 70Mb zipped.