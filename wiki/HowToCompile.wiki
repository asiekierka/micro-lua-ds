#summary How to compile MicroLua.

<wiki:toc />

= How To Compile MicroLua v4.6 =

== Introduction ==

This page will guide you on how to setup the development environment for building the sources of MicroLua. The installation process should be quite easy now on both Windows and Linux OS.

== Installation ==

=== Downloads ===

First download everything here and then follow the instructions below.

 # For best performances during extraction of archives, you may want to install either [http://www.7-zip.org/ 7-zip] or [http://portableapps.com/apps/utilities/peazip_portable PeaZip Portable]
   * <u>Windows:</u> just download it from the website
   * <u>Linux:</u> run `sudo apt-get install p7zip-full` to get 7zip
 # [http://sourceforge.net/projects/devkitpro/files/Automated%20Installer/ devkitPro]
   * <u>Windows:</u> download 'devkitProUpdater-x.x.x.exe'
   * <u>Linux:</u>
     # Download 'devkitARMupdate.pl'
     # Allow yourself to execute it with `chmod u+x devkitARMupdate.pl`
     # Make sure you have a Perl engine to run it later (you will most likely have it by default)
 # [http://code.google.com/p/microlua/downloads/list µLibrary (fixed for up-to-date devkitPro)]
 # While you are it, also get the [http://code.google.com/p/microlua/downloads/list modified libnds] (required to make Nifi working)
 # Source code:
   * From the [http://code.google.com/p/microlua/source/checkout Subversion repository] that you can get following GetTheCurrentSourceCode
   * From a static [http://code.google.com/p/microlua/downloads/list zip archive]; you should however download it from the repository as it is more up-to-date than the packages

=== Installing devkitPro ===

We start with the set up of devkitPro, which is a compiling tool-chain to build C and C++ source code for ARM processors (the ones used by the NDS).

==== Windows ====

Launch 'devkitProUpdater-x.x.x.exe'.

For a minimal installation you will only need _msys_ and _devkitARM_, so you can uncheck the others unless you plan to make homebrews for PSP, NGC or Wii, or you want to use the utilities

Check that the environment variables directing to the devkitPro folder have been successfully created:
 # Go to Start->Control Panel->System
 # Click on the 'Advanced' tab
 # Click the button at the bottom: "Environment Variables"
They should be in the bottom list "System Variables"; otherwise, add them:
{{{
# Adapt the paths to your own configuration
DEVKITPRO=c:\devkitpro
DEVKITARM=c:\devkitpro\devkitARM
}}}

==== Linux ====
 
Execute 'devkitARMupdate.pl'. It will install devkitPro in '~' (your home) but you can change this by editing the script (first line of true code)

Then add environment variables: append the following lines to '~/.profile' so every shell you launch with your account will have them
{{{
# Adapt the paths to your own configuration
DEVKITPRO=/home/YOUR-NAME/devkitpro
DEVKITARM=$DEVKITPRO/devkitARM
}}}



At this point you should be able to compile a generic source code made for NDS. But MicroLua requires two more things before compiling it...

=== Installing µLibrary ===

The next step is to install the µLibrary. µLibrary is a lib for low level stuff for ARM processors, such as handling drawings.

The package you downloaded actually has precompiled files that should do the work. Copy the 'libnds' folder and merge it into your devkitPro folder. That's all.

=== Setting up the custom libwifi ===

Then you must copy and merge the content of the modified libnds into your devkitPro just like you did for the µLibrary. Replace the files when needed.

By doing this, you enable the Nifi system. It won't work otherwise.

=== Installing the sources of MicroLua ===

If you followed GetTheCurrentSourceCode, you can work directly in the 'trunk.luads' folder. Don't forget to clean it before committing if you intend to work on MicroLua.

Otherwise, just extract the archive whenever you want.

In both cases, you need to create a folder called 'efsroot' inside 'luads'. It is used to create a version of MicroLua using EFSLib. If you don't understand what I am talking about, just let this folder empty and forget it.

== Compilation ==

Here we are. Everything is set up, and we can compile MicroLua.

=== Windows ===

Windows users can directly use the two '.bat' files in the folder 'luads':
 * 'Compile All.bat' will compile both the Lua interpreter and the MicroLua executable
 * 'Compile DS.bat' will only compile the executable, that is to say the content of the 'source' folder

The first time, you need to run 'Compile All.bat' in order to compile the libraries of the Lua interpretor. Then 'Compile DS.bat' will do the job as long as you don't modify the content of the folder 'lua-5.1.3'.

=== Linux ===

There is no bash scripts for Linux users, but this remains really easy:
 * On the first time, you have to compile the Lua libraries
   # `cd lua-5.1.3`
   # `make` and then `make install`
   # you can `make clean` here to clean the folder a bit
   # go back to 'luads' with `cd ..`
 * Every other times, you just need to do `make` in the folder 'luads'; maybe `make clean` after this

As long as you don't modify the content of the folder 'lua-5.1.3', you don't need to compile the Lua intepretor again, so a single `make` in 'luads' in order to build the content of 'source' is enough. `make clean` is still useful.

