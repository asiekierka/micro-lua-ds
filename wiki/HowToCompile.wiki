#summary How to compile MicroLua.

<wiki:toc />

= How To Compile MicroLua v3.0. =

== Introduction ==

This page will guide you on how to setup the development environment
for building the source of MicroLua. There are several steps and several
packages to install, but should be relatively straightforward.

== Windows XP ==

First download everything here and then follow the instructions below.

 * Several archives are in the 7z format, so you will need [http://www.7-zip.org/ 7-zip] or [http://portableapps.com/apps/utilities/peazip_portable PeaZip Portable].
 * [http://sourceforge.net/projects/devkitpro/files/Automated%20Installer/devkitProUpdater-1.5.0.exe/download devkitPro]
 * [http://sourceforge.net/projects/devkitpro/files/devkitARM/previous/devkitARM%20release%2024/devkitARM_r24-win32.exe/download devkitARM-r24]
 * PAlib (the version needed is PAlib090801.7z, you can download it in a [http://forum.palib.info/index.php?topic=7048.0 forum thread] with links to many mirrors).
 * [http://brunni.palib.info/new/dl/nds/uLibrary.7z uLibrary]
 * fatlib (The [http://nanolua.fr.nf/nanolua/files/libfat20080530.zip 20080530 version] should have better results, you'll only find it here)
 * The source code ([http://code.google.com/p/microlua/source/checkout Subversion repository] or [http://code.google.com/p/microlua/downloads/list zip])


=== Details ===

==== DevKitPro ====

Start with DevKitPro.  You may use the web installer from the website, or our copy here.
This package is the compiler and binary tools for compiling ARM source code.
Recommend to install to 'c:\devkitpro'. Just don't use spaces in any folder names.
Hereafter we refer to your devkitpro install folder as simply '\devkitpro'.


==== DevARM-`r24` ====

Initially MicroLua v3.0 requires to backdate the DevARM library.
This is the ARM 7/9 hardware library.  Rename or delete the DevKitPro `DevArm` folder, then unpack this package into '\devkitpro'.

==== PAlib ====

PAlib is a Nintendo DS hardware library.  This library provides access most of the features of the DS. 

 * Install PAlib into '\devkitpro'
 * cd to '\devkitpro\PAlib\lib'
 * Run 'build.bat'

==== uLibrary ====

uLibrary is a lib for low level 'OS' like stuff for ARM processors.
This is built next.
  
 * Unpack to '\devkitpro\'
 * cd to '\devkitpro\uLibrary-1.12\Source\'
 * Run 'build.bat'
 * Run 'Install.bat'
 * cd .. to '\devkitpro\uLibrary-1.12\'
 * Run 'Install.bat' here also (yes they do 2 different tasks)!

==== fatlib ====

This has to be backdated.  Use the version listed above, 20080530.
Extract the zip to a location.  

 * Copy the file '\libfat20080530\nds\lib\libfat.a' to '\devkitpro\libnds\lib'
 * Copy the file '\libfat20080530\nds\include\fat.h' to '\devkitpro\libnds\include'

==== MicroLua Source ====

 * Extract the MicroLua source to folder '\devkitpro\', or GetTheCurrentSourceCode.
 * You can skip this item if you only need a `.nds` for you hardware. If you want a `.nds` to test on _No$GBA_ you'll have to rename the resulting source folder (the one containing `Examples`, `Fat`...) to 'luads'. This is because the name of a compiled file is the same as the source folder and a `luads.img` will be needed. Note that if you track the code in our repository, you'll have to rename it again to `trunk` before updates, unless you only checked out the trunk.
 * Copy '\devkitpro\luads\img\fcsr.dldi' file to '\devkitpro\devkitarm\bin\dldi\' (make the dldi folder).

==== Launch the compilation ====

Now use `\devkitpro\luads\Compile All.bat` file to build. Either double click it of launch it from the command line.

=== Folders ===

{{{
\devkitPro
	\devkitARM
	\examples
	\insight
	\libfat20080530
	\libgba
	\libmirko
	\libnds
	\luads
		\Examples
		\Fat
		\img
		\lua-5.1.3
		\source
		\Utilities
	\msys
	\Other Libs
	\PAlib
	\Programmers Notepad
	\uLibrary-1.12
}}}

=== Notes ===

==== Libs ====
Once the DevKitPro, DevARM-`r24`, PAlib, uLibrary and fatlib are setup you don't have to recompile those unless one of these components is updated.  The setup is complete.

==== Environment variables ====
DevKitPro uses 2 environment variables.
They are: 
{{{
 DEVKITPRO=c:\devkitpro
 DEVKITARM=c:\devkitpro\devkitarm
}}}

To do it manually: 
 Start->Control Panel->System<br>
 Then click on 'Advanced' tab<br> 
 Then click the button at the bottom 'Environment Variables'<br> 
 They should be in the bottom list, System Variables<br>


==== Reference Package ====
We should probably make a big package for win32 that contains all this stuff already done. This way newbies can get just one package to unzip and go. Such a package would be about 70Mb zipped.

----
== Linux ==

First download everything here and then follow the instructions below.

 * Several archives are in the 7z format, so you will need [http://www.7-zip.org/ 7-zip] 
 For debian/ubuntu use `apt-get install p7zip` or try `yum install 7z`.

 * [http://sourceforge.net/projects/devkitpro/files/ devkitpro packages]
Many packages are listed at the SourceForge site.  I've listed the folders and the versions I used.
|| *Folder* || *Package* ||
|| devkitARM/previous/DevkitARM release 24 || devkitARM_r24-i686-linux.tar.bz2 ||
|| dswifi/previous/dswiki 0.3.10 || dswifi-0.3.10.tar.bz2 ||
|| libnds/previous/libnds-1.3.6 || libnds-1.3.6.tar.bz2 ||
|| filesystem/filesystem-0.9.2 || libfilesystem-0.9.2.tar.bz2 ||
|| default arm7/previous || default_arm7-0.5.6.tar.bz2  ||
|| maxmod/maxmod 1.0.6 || maxmod-nds-1.0.6.tar.bz2 ||

 * [http://brunni.palib.info/new/dl/nds/uLibrary.7z uLibrary]

 * fatlib (The [http://nanolua.fr.nf/nanolua/files/libfat20080530.zip 20080530 version] should have better results, you'll only find it here)

 * GetTheCurrentSourceCode

=== Optional ===

 * PAlib (the version needed is PAlib090801.7z, you can download it in a [http://forum.palib.info/index.php?topic=7048.0 forum thread] with links to many mirrors).
I did not install PAlib yet.  TODO: update for linux.

=== Details ===

==== DevKitPro ====

Make a folder to work in.  I used `/opt/devkitpro/`.
{{{
 mkdir /opt/devkitpro
 cd /opt/devkitpro
}}}
Just don't use spaces in any folder names.

Hereafter we refer to your devkitpro install folder as simply '/devkitpro'.


==== Unpack packages ====

Unpack the devkitARM_r24-i686-linux.tar.bz2 package into '/devkitpro'.
{{{
 tar -jxvf devkitARM_r24-i686-linux.tar.bz2 -C /opt/devkitpro/
 tar -jxvf dswifi-0.3.10.tar.bz2 -C /opt/devkitpro/
 tar -jxvf libnds-1.3.6.tar.bz2 -C /opt/devkitpro/
 tar -jxvf libfilesystem-0.9.2.tar.bz2 -C /opt/devkitpro/
 tar -jxvf default_arm7-0.5.6.tar.bz2 -C /opt/devkitpro/
 cp /opt/devkitpro/default.arm7 /opt/devkitpro/libnds/
 tar -jxvf maxmod-nds-1.0.6.tar.bz2 -C /opt/devkitpro/
 p7zip -d uLibrary.7z
 mv uLibrary\ -\ 1.12/ /opt/devkitpro/uLibrary
 unzip libfat20080530.zip
 cp libfat20080530/nds/lib/libfat.a /opt/devkitpro/lib/
 cp libfat20080530/nds/include/fat.h /opt/devkitpro/include/
}}}

==== MicroLua Source ====

 * Extract the MicroLua source to folder '/devkitpro', or GetTheCurrentSourceCode.
 * You can skip this item if you only need a `.nds` for you hardware. If you want a `.nds` to test on _No$GBA_ you'll have to rename the resulting source folder (the one containing `Examples`, `Fat`...) to 'luads'. This is because the name of a compiled file is the same as the source folder and a `luads.img` will be needed. Note that if you track the code in our repository, you'll have to rename it again to `trunk` before updates, unless you only checked out the trunk.

==== Makefiles for Linux ====

Some changes had to be made to get the build system to work in Linux.
However they are very minor.  These have been checked into svn here.

 * Locate the Makefile at luads/ folder, and comment out the win32 line and uncomment the linux line.
{{{ 
 	#if windows uncomment this 
 	#EXPORT_DIR := /c/ndsexamples/ 
 	#if linux uncomment this
 	EXPORT_DIR := ./nds_examples/
}}}

==== Environment Variables ====

export env vars: (shell dependant, BASH use export)
{{{
 DEVKITPRO=/opt/devkitpro
 DEVKITARM=$DEVKITPRO/devkitARM
}}}

==== Launch the compilation ====

First we need to make a folder that mimics the win32 setup.  Then we need to make 2 symbolic links so everything will match up.
{{{
 mkdir /opt/devkitpro/libnds
 cd /opt/devkitpro/libnds
 ln -s ../include include
 ln -s ../lib lib
}}}

===== uLibrary =====

Change to uLibrary and build the package.
{{{
 cd /opt/devkitpro/uLibrary/Source
 make
 make install
}}}
Rename `include/uLib` to `include/ulib`  (lower case L !)
{{{
 mv /opt/devkitpro/include/uLib/ /opt/devkitpro/include/ulib
}}}

===== Lua-5.1.3 =====

Build the core Lua code and the Microlua extension code.
{{{
 cd /path/to/sources/lua-5.1.3
 make
 make install
}}}

===== Microlua binaries =====

====== Test versions ======

You can skip this section if you only need a `.nds` for you hardware. If you want a `.nds` to test on _No$GBA_ your source folder will need to be named 'luads', and you'll need to do this:
{{{
 mkdir /opt/devkitpro/devkitARM/bin/dldi/
 cp /path/to/sources/img/fcsr.dldi /opt/devkitpro/devkitARM/bin/dldi/fcsr.dldi
 cd /path/to/sources/
 cp ./img/luads.img luads.img [hack, until someone figures the way to make this image in linux]
 make
}}}

======= Hardware versions ======

{{{
 cd /path/to/sources/
 make
}}}

 * Copy xxxx.nds to your linker and run.


=== Folders ===

{{{
/opt
   /devkitpro
	/devkitARM
	/include
	/lib
	/libfat20080530
	/libnds
	/luads
		/Examples
		/Fat
		/img
		/lua-5.1.3
		/source
		/Utilities
	/uLibrary
}}}

=== Notes ===

==== Tested Linux Versions ====

Lets list the tested Linux OS (and OSX10.?) here.
  * Ubuntu LSV 8.04
  * Debian Squeeze as of december 4th 2009

==== Libs ====

Once the DevARM-`r24`, PAlib, uLibrary and fatlib are setup you don't have to recompile those unless one of these components is updated.  The setup is complete.